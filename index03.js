// FizzBuzz
// –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ —É—Å—ñ —á–∏—Å–ª–∞  –≤—ñ–¥ 1 –¥–æ n. –¢—Ä–µ–±–∞ –≤–∏–≤–µ—Å—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—å —á–∏—Å–ª–∞, –¥–µ n - —Ü–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –∑ —Ç–∞–∫–∏–º–∏ —É–º–æ–≤–∞–º–∏:
// –≤–∏–≤–µ–¥–µ–Ω–Ω—è fizz –∑–∞–º—ñ—Å—Ç—å —á–∏—Å–µ–ª, –∫—Ä–∞—Ç–Ω–∏—Ö 3;
// –≤–∏–≤–µ–¥–µ–Ω–Ω—è buzz –∑–∞–º—ñ—Å—Ç—å —á–∏—Å–µ–ª, –∫—Ä–∞—Ç–Ω–∏—Ö 5;
// –≤–∏–≤–µ–¥–µ–Ω–Ω—è fizzbuzz –∑–∞–º—ñ—Å—Ç—å —á–∏—Å–µ–ª, –∫—Ä–∞—Ç–Ω–∏—Ö —è–∫ 3, —ñ 5.

// const n = 37;
// for (let i = 1; i <= n; i += 1) {
//   if (i % 3 == 0 && i % 5 == 0) {
//     console.log('fizzbuzz =', i);
//   }
//   else if (i % 3 === 0) {
//     console.log('buzz =', i);
//   } else if (i % 5 === 0) {
//     console.log('buzz =', i);
//   }
// }

// Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ genres —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggae¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = ['Jazz', 'Blues'];
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª–ª');
// console.log(genres);
// console.log(genres[0]);
// console.log(genres[genres.length - 1]);
// console.log(genres.splice(0, 1)[0]);
// genres.splice(0, 0, 'Country', 'Reggae');
// console.log(genres);

// const moreGenres = ['Country', 'Reggae'];
// moreGenres.push(...genres);
// console.log(moreGenres);

// Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = '8 11';
// const valuesArr = values.split(' ');
// console.log(valuesArr);
// const rectangleArea = Number(valuesArr[0]) * Number(valuesArr[1]);
// console.log('Area of ‚Äã‚Äãa rectangle equal = ', rectangleArea);

// Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1}:${fruits[i]}`);
// }
// for (const i in fruits) {  //i - vsegda stroka!!!
//   console.log(`${Number(i)+1}:${fruits[i]}`);
// }

// Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö names –∏ phones —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// const names = "Jacob,William,Solomon,Artemis";
// const phones = "89001234567,89001112233,890055566377,890055566300";
// const namesArr = names.split(",");
// const phonesArr = phones.split(",");
// const userId = Number(prompt("Enter userID to check phone number."));
// console.log(`Username:${namesArr[userId]}  Phone:${phonesArr[userId]}`);

// Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = "Welcome to the future";
// const stringArr = string.split(" ");
// console.log(stringArr);
// const formatedStringArr = stringArr.slice(1, stringArr.length - 1);
// console.log(formatedStringArr);
// const formatedString = formatedStringArr.join(" ");
// console.log(formatedString);

// const string = 'Welcome to the future';
// console.log(
//   string
//     .split(' ')
//     .slice(1, string.length - 1)
//     .join(' ')
// );

// Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const reverseString = string.split('').reverse().join('');
// console.log(reverseString);

// const string = 'Welcome to the future';
// let newString = [];
// for (let i = string.length - 1; i >= 0; i -= 1) {
//   newString.push(string[i]);
// }
// newString = newString.join('');
// console.log(newString);

// Example 7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// console.log(langs.sort());

// –ö–ê–ö –ú–ï–ù–Ø–¢–¨ –ú–ï–°–¢–ê–ú–ò –Ñ–õ–ï–ú–ï–ù–¢–Ü –í –ú–ê–°–°–ò–í–ï
// let temp = langs[1];
// langs[1] = langs[2];
// console.log(langs);
// langs[2] = temp;
// console.log(langs);
//------------------------------------
// –¶–∏–∫–ª –≤ —Ü–∏–∫–ª–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// for (let i = 0; i < langs.length - 1; i += 1) {
//   for (let j = i + 1; j < langs.length; j += 1) {
//     if (langs[i][0] > langs[j][0]) {      // [0] —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
//       let temp = langs[i];
//       langs[i] = langs[j];
//       langs[j] = temp;
//     }
//   }
// }
// console.log(langs);

// Example 8 - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0];
// for (const number of numbers) {
//   if (number < min) {
//     min = number;
//   }
// }
// console.log(min);

// ========================================================================== //
// ============================ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç—ã ========================== //
// ========================================================================== //

//–°–æ–∑–¥–∞–Ω–∏–µ slug —Å—Ç—Ä–æ–∫–∏
// slugify("QWWdsd dsds sdsds SDdsd");
// function slugify(title) {
//   const slug = title.toLowerCase().split(" ").join("-");
//   return slug;
// }

// // –§—É–Ω–∫—Ü–∏—è —Å—É–º–º—ã –≤—Å–µ—Ö —á–∏—Å–µ–ª –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
// function calculateTotal(number) {
//   // Change code below this line
//   let total = 0;
//   for (let i = 0; i <= number; i++) {
//     total += i;
//   }
//   console.log(total);
//   return total;
//   // Change code above this line
// }
// calculateTotal(3);

// // –°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞
// const order = [1, 2, 3];
// let total = 0;
// for (i = 0; i < order.length; i += 1) {
//   total += order[i];
// }
// console.log(total);

// –°—É–º–º–∞ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
// calculateTotalPrice([1, 2, 3, 4, 5, 6])
// function calculateTotalPrice(order) {
//   let total = 0;
//   // Change code below this line
//   for (i = 0; i < order.length; i += 1) {
//     total += order[i];
//   }
//   // Change code above this line
//   return total;
//   console.log(total);
// }

// –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ

// let string = "The quick brown fox jumped over the lazy dog";
// const stringArr = string.split(' ');
// let longestString = stringArr[0];
// for (const word of stringArr) {
//   if (word.length > longestString.length) {
//     longestString = word;
//   }
// }
// console.log(longestString);

// –§—É–Ω–∫—Ü–∏—è  –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
// findLongestWord('QWEWWrs sdsdasd qweHJGDHJSF')
// function findLongestWord(string) {
//   const stringArr = string.split(' ');
//   let longestString = stringArr[0];
//   for (const word of stringArr) {
//     if (word.length > longestString.length) {
//       longestString = word;
//     }
//   }
//   return longestString;
// }

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤ –æ—Ç –º–∏–Ω –¥–æ –º–∞–∫—Å
// createArrayOfNumbers(1, 3)
// function createArrayOfNumbers(min, max) {
//   const numbers = [];
//   // Change code below this line
//   for (let i = min; i <= max; i += 1) {
//     numbers.push(i);
//   }
//   console.log(numbers);
//   // Change code above this line
//   return numbers;
// }

// const array1 = [1, 3, 5];
// const array2 = [0, 8, 5, 3];
// const newArr = array1.concat(array2).sort();
// const newArrSort = [];
// console.log(newArr);
// for (let i = 0; i < newArr.length; i++) {
//   const newArrEl = newArr[i];
//   if (newArrEl === newArr[i + 1]) {
//     newArrSort.push(newArrEl);
//   }
// }
// console.log(newArrSort);

// –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ú–ê–°–°–ò–í–û–í
// function getCommonElements(array1, array2) {
//   const newArr = array1.concat(array2).sort();
//   const newArrSort = [];
//   // console.log(newArr);
//   for (let i = 0; i < newArr.length; i++) {
//     const newArrEl = newArr[i];
//     if (newArrEl === newArr[i + 1]) {
//       newArrSort.push(newArrEl);
//     }
//   }
//   return newArrSort;
// }

// –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ú–ê–°–°–ò–í–û–í
// function getCommonElements(array1, array2) {
//   // Change code below this line
//   const newArr = array1.concat(array2).sort();
//   const newArrSort = [];
//   if (array1 !== undefined && array2 !== undefined) {
//     for (let i = 0; i < newArr.length; i++) {
//       const newArrEl = newArr[i];
//       if (newArrEl === newArr[i + 1]) {
//         newArrSort.push(newArrEl);
//       }
//       newArrSort.includes();
//     }
//     return newArrSort;
//     // Change code above this line
//   }
// }

// –§–£–ù–ö–¶–ò–Ø –û–ë–©–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ –ú–ê–°–°–ò–í–û–í
// function getCommonElements(array1, array2) {
//   const newArr = [];
//   for (let i = 0; i < array1.length; i += 1) {
//     if (array2.includes(array1[i])) {
//       newArr.push(array1[i]);
//     }
//   }
//   return newArr;
// }
// console.log(getCommonElements([1, 2, 3], [2, 4])); // [2]
// console.log(getCommonElements([1, 2, 3], [2, 1, 17, 19])); // [1, 2]
// console.log(getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27])); // [12, 27, 3]
// console.log(getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40])); // [10, 30, 40]
// console.log(getCommonElements([1, 2, 3], [10, 20, 30])); // []

// –ú–ê–°–ò–ò–í –ß–ï–¢–ù–´–• –ß–ò–°–ï–õ –æ—Ç START to END
// function getEvenNumbers(start, end) {
//   // Change code below this line
//   const evenArr = [];
//   for (let i = start; i <= end; i++) {
//     if (i % 2 === 0) {
//       evenArr.push(i);
//     }
//   }
//   return evenArr;

//   // Change code above this line
// }
// console.log(getEvenNumbers(1, 10));
